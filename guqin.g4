grammar guqin;

typepair: (INT | BOOL | STRING | ID) ID;
args: (typepair (',' typepair*)?);
func: (INT | BOOL | STRING | VOID | ID) ID '(' args ')' '{' stat* '}';
construct_func: ID'('')''{' stat* '}';
class: CLASS ID '{' (typepair';') | construct_func | func '}';

ID: [a-zA-Z][a-zA-Z0-9_]*;
LINE_COMMENT: '//' .*? '\r'? '\n' -> skip;
BLOCK_COMMENT: '/*' .*? '*/' -> skip;
STRING_VALUE: '"' ( '\\' ["] | ~["])* '"';
VOID: 'void';
BOOL: 'bool';
INT: 'int';
STRING: 'string';
NEW: 'new';
CLASS: 'class';
NULL: 'null';
TRUE: 'true';
FALSE: 'false';
THIS: 'this';
IF: 'if';
ELSE: 'else';
FOR: 'for';
WHILE: 'while';
BREAK: 'break';
CONTINUE: 'continue';
RETURN: 'return';
PRINT:'print';
PRINTLN:'println';
PRINTINT:'printlinInt';
GETSTRING:'getString';
GETINT:'getInt';
TOSTRING:'toString';
ADD: '+';
MINUS: '-';
MUL: '*';
DIV: '/';
MOD: '%';
AND: '&&';
OR: '||';
NOT: '!';
GEQ: '>=';
LEQ: '<=';
EQ: '==';
UEQ: '!=';
RSH: '>>';
RLH: '<<';
SAD: '++';
SMI: '--';
BAN: '&';
BOR: '|';
XOR: '^';
BNO: '~';
LE: '<';
GE: '>';
ASS: '=';
INT_VALUE: [0-9]+;
WS: [ \r\n\t]+ -> skip;